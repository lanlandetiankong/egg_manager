package ${package.Controller};

import org.apache.dubbo.config.annotation.Reference;
import com.egg.manager.persistence.commons.base.beans.helper.WebResult;
import com.egg.manager.persistence.enhance.annotation.log.em.EmPcWebOperationLog;
import com.egg.manager.persistence.enhance.annotation.log.em.EmPcWebQueryLog;
import com.egg.manager.persistence.enhance.annotation.user.CurrentLoginUser;
import com.egg.manager.persistence.commons.base.constant.basic.WebApiConstant;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Api(value = "API ==>>  ${table.controllerName} ", description = "${cfg.moduleName_Cn}接口")
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
//@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end
/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@RequestMapping("${cfg.baseReqUrl}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end



@Autowired
private ${cfg.baseEntityName}Mapper ${cfg.baseEntityName_firstLow}Mapper;
@Reference
private ${cfg.baseEntityName}Service ${cfg.baseEntityName_firstLow}Service;

@EmPcWebQueryLog(fullPath = "${cfg.baseReqUrl}/getAllDtos")
@ApiOperation(value = "分页查询(Dto)->${cfg.moduleName_Cn}", response = WebResult.class, httpMethod = "POST")
@ApiImplicitParams({
        @ApiImplicitParam(name = WebApiConstant.FIELDNAME_QUERY_OBJ, value = WebApiConstant.QUERY_OBJ_LABEL, required = true, dataTypeClass = String.class),
        @ApiImplicitParam(name = WebApiConstant.FIELDNAME_PAGINATION_OBJ, value = WebApiConstant.PAGINATION_OBJ_LABEL, required = true, dataTypeClass = String.class),
        @ApiImplicitParam(name = WebApiConstant.FIELDNAME_SORT_OBJ, value = WebApiConstant.SORT_OBJ_LABEL, required = true, dataTypeClass = String.class),
})
@PostMapping(value = "/getAllDtos")
public MyCommonResult<${cfg.baseEntityName}Vo> doGetAll${cfg.baseEntityName}Dtos(HttpServletRequest request,String queryObj,String paginationObj,String sortObj,
@CurrentLoginUser CurrentLoginUserInfo loginUserInfo){
        MyCommonResult<${cfg.baseEntityName}Vo> result=new MyCommonResult<${cfg.baseEntityName}Vo>();
        try{
        //解析 搜索条件
        List<QueryFormFieldBean> queryFieldBeanList=this.parseQueryJsonToBeanList(queryObj);
        queryFieldBeanList.add(QueryFormFieldBean.dealGetEqualsBean("state",BaseStateEnum.ENABLED.getValue()));
        //取得 分页配置
        AntdvPaginationBean vpage=parsePaginationJsonToBean(paginationObj);
        //取得 排序配置
        List<AntdvSortBean> sortMap=parseSortJsonToBean(sortObj,true);
        result=${cfg.baseEntityName_firstLow}Service.dealGet${cfg.baseEntityName}DtoPages(result,queryFieldBeanList,vpage,sortMap);
        }catch(Exception e){
        this.dealCommonErrorCatch(log,result,e);
        }
        return result;
        }


@ApiOperation(value = "根据id查询->${cfg.moduleName_Cn}", response = WebResult.class, httpMethod = "POST")
@EmPcWebQueryLog(fullPath = "${cfg.baseReqUrl}/getOneItemById")
@PostMapping(value = "/getOneItemById")
public MyCommonResult<${cfg.baseEntityName}Vo> doGetOneItemById(HttpServletRequest request,String ${cfg.baseEntityName_firstLow}Id,@CurrentLoginUser CurrentLoginUserInfo loginUserInfo){
        MyCommonResult<${cfg.baseEntityName}Vo> result=new MyCommonResult<${cfg.baseEntityName}Vo>();
        try{
    ${cfg.baseEntityName} ${cfg.baseEntityName_firstLow}=${cfg.baseEntityName_firstLow}Mapper.selectById(${cfg.baseEntityName_firstLow}Id);
        result.putBean(${cfg.baseEntityName}Transfer.transferEntityToVo(${cfg.baseEntityName_firstLow}));
        }catch(Exception e){
        this.dealCommonErrorCatch(log,result,e);
        }
        return result;
        }


@ApiOperation(value = "新增->${cfg.moduleName_Cn}", response = WebResult.class, httpMethod = "POST")
@EmPcWebOperationLog(fullPath = "${cfg.baseReqUrl}/addByForm")
@PostMapping(value = "/addByForm")
public MyCommonResult<${cfg.baseEntityName}Vo> doAddByForm(HttpServletRequest request,${cfg.baseEntityName}Vo ${cfg.baseEntityName_firstLow}Vo,@CurrentLoginUser CurrentLoginUserInfo loginUserInfo){
        MyCommonResult<${cfg.baseEntityName}Vo> result=new MyCommonResult<${cfg.baseEntityName}Vo>();
        Integer addCount=0;
        try{
        if(${cfg.baseEntityName_firstLow}Vo==null){
        throw new Exception("未接收到有效的${cfg.moduleName_Cn}表单！");
        }else{
        addCount=${cfg.baseEntityName_firstLow}Service.dealAdd${cfg.baseEntityName}(${cfg.baseEntityName_firstLow}Vo,loginUser);
        }
        result.putCount(addCount);
        }catch(Exception e){
        this.dealCommonErrorCatch(log,result,e);
        }
        return result;
        }


@ApiOperation(value = "更新->${cfg.moduleName_Cn}", response = WebResult.class, httpMethod = "POST")
@EmPcWebOperationLog(fullPath = "${cfg.baseReqUrl}/updateByForm")
@PostMapping(value = "/updateByForm")
public MyCommonResult doUpdateByForm(HttpServletRequest request,${cfg.baseEntityName}Vo ${cfg.baseEntityName_firstLow}Vo,@CurrentLoginUser CurrentLoginUserInfo loginUserInfo){
        MyCommonResult result=new MyCommonResult();
        Integer changeCount=0;
        try{
        if(${cfg.baseEntityName_firstLow}Vo==null){
        throw new Exception("未接收到有效的${cfg.moduleName_Cn}表单！");
        }else{
        changeCount=${cfg.baseEntityName_firstLow}Service.dealUpdate${cfg.baseEntityName}(${cfg.baseEntityName_firstLow}Vo,loginUser,false);
        }
        result.putCount(changeCount);
        }catch(Exception e){
        this.dealCommonErrorCatch(log,result,e);
        }
        return result;
        }


@EmPcWebOperationLog(fullPath = "${cfg.baseReqUrl}/batchDelByIds")
@ApiOperation(value = "批量逻辑删除->${cfg.moduleName_Cn}", response = WebResult.class, httpMethod = "POST")
@ApiImplicitParams({
        @ApiImplicitParam(name = "delIds", value = "要删除的${cfg.moduleName_Cn}id数组", required = true, dataTypeClass = String[].class),
})
@PostMapping(value = "/batchDelByIds")
public MyCommonResult doBatchDelByIds(HttpServletRequest request,String[]delIds,@CurrentLoginUser CurrentLoginUserInfo loginUserInfo){
        MyCommonResult result=new MyCommonResult();
        Integer delCount=0;
        try{
        if(delIds!=null&&delIds.length>0){
        delCount=${cfg.baseEntityName_firstLow}Service.dealDel${cfg.baseEntityName}ByArr(delIds,loginUser);
        }
        result.putCount(delCount);
        }catch(Exception e){
        this.dealCommonErrorCatch(log,result,e);
        }
        return result;
        }


@EmPcWebOperationLog(fullPath = "${cfg.baseReqUrl}/delOneById")
@ApiOperation(value = "逻辑删除->${cfg.moduleName_Cn}", notes = "根据id删除${cfg.moduleName_Cn}", response = WebResult.class, httpMethod = "POST")
@ApiImplicitParams({
        @ApiImplicitParam(name = "delId", value = "要删除的${cfg.moduleName_Cn}id", required = true, dataTypeClass = String.class),
})
@PostMapping(value = "/delOneById")
public MyCommonResult doDelOneById(HttpServletRequest request,String delId,@CurrentLoginUser CurrentLoginUserInfo loginUserInfo){
        MyCommonResult result=new MyCommonResult();
        try{
        if(StringUtils.isNotBlank(delId)){
        Integer delCount=${cfg.baseEntityName_firstLow}Service.dealDelOne(delId,loginUser);
        result.putCount(delCount);
        }
        }catch(Exception e){
        this.dealCommonErrorCatch(log,result,e);
        }
        return result;
        }


        }

#end